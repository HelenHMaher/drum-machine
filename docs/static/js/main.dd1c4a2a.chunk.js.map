{"version":3,"sources":["PowerButton/index.js","SingleDrumPadHooks/index.js","DrumPadSet/index.js","Display/index.js","App.js","serviceWorker.js","index.js","_App.scss"],"names":["PowerButton","props","power","id","onClick","className","SingleDrumPad","keyLetter","keyNumber","url","clipname","updateDisplay","useEffect","document","addEventListener","handleKeyPress","removeEventListener","playSound","e","getElementById","play","setTimeout","keyCode","src","keyArr","DrumPadSet","map","object","i","React","Component","Display","offStyles","color","variables","darkMain","onStyles","lightMain","App","state","display","style","bind","handlePowerClick","this","setState","event","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.dd1c4a2a.chunk.js","sourcesContent":["import React from \"react\";\n\nexport const PowerButton = (props) => {\n  if (props.power === true) {\n    const OFF = \"OFF\";\n    return (\n      <div id=\"power-button\" onClick={props.onClick} className=\"power-button\">\n        {OFF}\n      </div>\n    );\n  } else {\n    const ON = \"ON\";\n    return (\n      <div id=\"power-button\" onClick={props.onClick} className=\"power-button\">\n        {ON}\n      </div>\n    );\n  }\n};\n","import React, { useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\n\nexport const SingleDrumPad = (props) => {\n  const { keyLetter, keyNumber, url, clipname, updateDisplay, power } = props;\n\n  useEffect(() => {\n    document.addEventListener(\"keydown\", handleKeyPress);\n    return document.removeEventListener(\"keydown\", handleKeyPress);\n  });\n  const playSound = (e) => {\n    if (power === true) {\n      const sound = document.getElementById(keyLetter);\n      sound.play();\n      updateDisplay(clipname);\n    } else {\n      updateDisplay(\"Turn Me On\");\n      setTimeout(() => updateDisplay(\"\"), 500);\n    }\n  };\n  function handleKeyPress(e) {\n    if (e.keyCode === keyNumber) {\n      playSound();\n    }\n  }\n  return (\n    <div className=\"drum-pad\" id={clipname} onClick={playSound}>\n      {keyLetter}\n      <audio src={url} id={keyLetter} className=\"clip\"></audio>\n    </div>\n  );\n};\n\nexport default SingleDrumPad;\n\n/**\n * PropTypes are used to create warnings in the developer console of chrome if\n * we do not pass them properly to the component requiring them\n *\n * They also act as information to a engineer which props are required and act\n * as documentation when coding.\n */\nSingleDrumPad.propTypes = {\n  keyLetter: PropTypes.string.isRequired,\n  keyNumber: PropTypes.number.isRequired,\n  url: PropTypes.string.isRequired,\n  clipname: PropTypes.string.isRequired,\n  updateDisplay: PropTypes.func.isRequired,\n  power: PropTypes.bool.isRequired,\n};\n","import React from \"react\";\nimport SingleDrumPad from \"../SingleDrumPadHooks\";\n\nconst keyArr = [\n  {\n    keyNumber: 81,\n    keyLetter: \"Q\",\n    id: \"bell-tower\",\n    url:\n      \"https://sampleswap.org/samples-ghost/INSTRUMENTS%20(SINGLE%20SAMPLES)/Bells/859[kb]bell-tower.wav.mp3\",\n  },\n  {\n    keyNumber: 87,\n    keyLetter: \"W\",\n    id: \"bell-tree\",\n    url:\n      \"https://sampleswap.org/samples-ghost/INSTRUMENTS%20(SINGLE%20SAMPLES)/Bells/353[kb]belltree.aif.mp3\",\n  },\n  {\n    keyNumber: 69,\n    keyLetter: \"E\",\n    id: \"buizen-bell-E\",\n    url:\n      \"https://sampleswap.org/samples-ghost/INSTRUMENTS%20(SINGLE%20SAMPLES)/Bells/793[kb]buizen-bell-E.aif.mp3\",\n  },\n  {\n    keyNumber: 65,\n    keyLetter: \"A\",\n    id: \"cheesy-chimes\",\n    url:\n      \"https://sampleswap.org/samples-ghost/INSTRUMENTS%20(SINGLE%20SAMPLES)/Bells/89[kb]cheesy-chimes.wav.mp3\",\n  },\n  {\n    keyNumber: 83,\n    keyLetter: \"S\",\n    id: \"deep-dissonant-bell\",\n    url:\n      \"https://sampleswap.org/samples-ghost/INSTRUMENTS%20(SINGLE%20SAMPLES)/Bells/797[kb]deep_dissonant_bell.aif.mp3\",\n  },\n  {\n    keyNumber: 68,\n    keyLetter: \"D\",\n    id: \"hand-bells\",\n    url:\n      \"https://sampleswap.org/samples-ghost/INSTRUMENTS%20(SINGLE%20SAMPLES)/Bells/806[kb]hand_bells.aif.mp3\",\n  },\n  {\n    keyNumber: 90,\n    keyLetter: \"Z\",\n    id: \"harmonic-bell\",\n    url:\n      \"https://sampleswap.org/samples-ghost/INSTRUMENTS%20(SINGLE%20SAMPLES)/Bells/1079[kb]harmonic-bell-fx.wav.mp3\",\n  },\n  {\n    keyNumber: 88,\n    keyLetter: \"X\",\n    id: \"one-pretty-bell\",\n    url:\n      \"https://sampleswap.org/samples-ghost/INSTRUMENTS%20(SINGLE%20SAMPLES)/Bells/1128[kb]one-pretty-bell.wav.mp3\",\n  },\n  {\n    keyNumber: 67,\n    keyLetter: \"C\",\n    id: \"one-round-bellhit\",\n    url:\n      \"https://sampleswap.org/samples-ghost/INSTRUMENTS%20(SINGLE%20SAMPLES)/Bells/782[kb]one-round-bellhit.wav.mp3\",\n  },\n];\n\nexport default class DrumPadSet extends React.Component {\n  render() {\n    const drumPadSet = keyArr.map((object, i) => {\n      return (\n        <SingleDrumPad\n          keyLetter={keyArr[i].keyLetter}\n          keyNumber={keyArr[i].keyNumber}\n          url={keyArr[i].url}\n          clipname={keyArr[i].id}\n          updateDisplay={this.props.updateDisplay}\n          power={this.props.power}\n        />\n      );\n    });\n    return drumPadSet;\n  }\n}\n","import React from \"react\";\n\nexport const Display = props => {\n  return <div id=\"display\">{props.clipname}</div>;\n};\n","import React from \"react\";\nimport variables from \"./_App.scss\";\nimport { PowerButton } from \"./PowerButton\";\nimport DrumPadSet from \"./DrumPadSet\";\nimport { Display } from \"./Display\";\n\nconst offStyles = {\n  color: variables.darkMain,\n};\n\nconst onStyles = {\n  color: variables.lightMain,\n};\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      power: true,\n      display: \"\",\n      style: onStyles,\n    };\n    this.updateDisplay = this.updateDisplay.bind(this);\n    this.handlePowerClick = this.handlePowerClick.bind(this);\n  }\n  updateDisplay(clipname) {\n    this.setState({\n      display: clipname,\n    });\n  }\n  handlePowerClick(event) {\n    if (this.state.power === true) {\n      this.setState({ power: false, display: \"\", style: offStyles });\n    } else {\n      this.setState({ power: true, style: onStyles });\n    }\n  }\n  render() {\n    return (\n      <div className=\"app\" id=\"drum-machine\" style={this.state.style}>\n        <header className=\"app-header\">\n          <h2> Drum Machine</h2>\n        </header>\n        <div className=\"app-display\">\n          <Display clipname={this.state.display} power={this.state.power} />\n        </div>\n        <div id=\"drum-pad\" className=\"drum-pad-set\">\n          <DrumPadSet\n            updateDisplay={this.updateDisplay}\n            power={this.state.power}\n          />\n        </div>\n        <PowerButton power={this.state.power} onClick={this.handlePowerClick} />\n        <div className=\"footer\" id=\"footer\">\n          Helen Maher 2020\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"darkMain\":\"#000\",\"lightMain\":\"#fff\",\"darkAccent\":\"#ffde22\",\"lightAccent\":\"#ff8928\",\"warning\":\"#ff414e\"};"],"sourceRoot":""}